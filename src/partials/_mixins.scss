// Utilities
@import "mixins/vendor-prefixes";

@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Placeholder text
@mixin placeholder($color: $input-color-placeholder) {
  // Firefox
  &::-moz-placeholder {
    color: $color;
    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
  }
  &:-ms-input-placeholder { color: $color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
}

@mixin arrow($color){
  border: 1px solid $color;
  border-right: 0;
  border-top: 0;
  content: " ";
  display: block;
  height: 7px;
  pointer-events: none;
  position: absolute;
  transform: rotate(-45deg);
  width: 7px;
}

@mixin center($size){
  left: 50%;
  margin-left: -($size / 2);
  margin-top: -($size / 2);
  position: absolute;
  top: 50%;
}
@mixin overlay($offset: 0){
  bottom: $offset;
  left: $offset;
  position: absolute;
  right: $offset;
  top: $offset;
}

@mixin placeholder{
  $placeholders: ':-moz' ':-webkit-input' '-moz' '-ms-input';
  @each $placeholder in $placeholders{
    &:#{$placeholder}-placeholder{
      @content;
    }
  }
}
@function rem($val, $font-size-base : 10) {
  @return #{$val / $font-size-base}rem;
}

@mixin MQ($canvas) {

  @if $canvas == XS {
    @media only screen and (min-width: $screen-xs-min) { @content; } 
  }  
  @else if $canvas == phone {
    @media only screen and (max-width: $screen-xs-min) { @content; } 
  }   
  @else if $canvas == tablet {
    @media only screen and (min-width: $screen-xs-min) { @content; } 
  }
  @else if $canvas == S {
    @media only screen and (min-width: $screen-sm-min) { @content; } 
  }
  @else if $canvas == desktop {
    @media only screen and (min-width: $screen-sm-min) { @content; } 
  }
  @else if $canvas == M {
    @media only screen and (min-width: $screen-md-min) { @content; } 
  }
  @else if $canvas == L {
    @media only screen and (min-width: $screen-lg-min) { @content; } 
  }  
}

@mixin column($percentage, $float-direction:left) {
  width: 100% * $percentage;
  float: $float-direction;
}

// Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  // IE8 filter
  $opacity-ie: ($opacity * 100);
  filter: alpha(opacity=$opacity-ie);
}

// WebKit-style focus
@mixin tab-focus() {
  // Default
  outline: thin dotted;
  // WebKit
  outline: 0px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

@mixin font-face($font-family, $font-filename, $font-weight : 400, $font-style :normal, $font-stretch : normal) {
  @font-face {
    font-family: '#{$font-family}';
    src: url('#{$font-filename}.eot');
    src: url('#{$font-filename}.eot?#iefix') format('embedded-opentype'),
    url('#{$font-filename}.woff') format('woff'),
    url('#{$font-filename}.ttf') format('truetype'),
    url('#{$font-filename}.svg##{$font-family}') format('svg');
    font-weight: $font-weight;
    font-style: $font-style;
    font-stretch: $font-stretch;
    -webkit-font-smoothing: subpixel-antialiased;
  }
}

@mixin absPosition ($top: auto, $right: auto, $bottom: auto, $left: auto) {
     position: absolute;
     top: $top;
     right: $right;
     bottom: $bottom;
     left: $left;
}

@mixin fontsize($size: 24, $base: 16) {
  font-size: $size + px;
  font-size: ($size / $base) * 1rem;
}

@mixin box-shadow($shadow...) {
  box-shadow: $shadow;
}

@mixin box-sizing($type) {
  box-sizing: $type;
}

@mixin text-shadow($shadow...) {
  text-shadow: $shadow;
}

@mixin circle-box($size) {
     width: $size;
     height: $size;
     @include border-radius(100%);
}
@mixin square-box($size) {
     width: $size;
     height: $size;
}

@mixin transform($val) {
  -webkit-transform: $val;
     -moz-transform: $val;
          transform: $val;
}

@mixin keyframes($animation-name) {
  @-webkit-keyframes $animation-name {
    @content;
  }
  @-moz-keyframes $animation-name {
    @content;
  }
  @keyframes $animation-name {
    @content;
  }
}

